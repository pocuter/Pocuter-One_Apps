#include "settings.h"
#include "system.h"

// random generator:
// coin
//   any button press tosses the coin
// between X and Y (inlcusive)
//   U increases max. number, D decreases max. number. minimum number is always 1. X rolls random number
// X dice
//   U increases dice count, D decreases dice count, X rolls dice
// A-Z
//  any button press gives a new letter

#define OPTION_RECTANGLE_SPEED          10.0
#define RANDOMIZE_ANIMATION_TIME        1.0
#define MAX_RANDOM_NUMBER               100
#define MAX_DICE                        10

// images
UG_COLOR coinFrontSide[] = {0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF0C0A00, 0xFF5C4D00, 0xFF9B8200, 0xFFCBAB00, 0xFFEBC600, 0xFFFFD700, 0xFFFFD700, 0xFFEBC600, 0xFFCBAB00, 0xFF9B8200, 0xFF5C4D00, 0xFF0C0A00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF241E00, 0xFF9B8200, 0xFFF3CC00, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFF3CC00, 0xFF9B8200, 0xFF241E00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF040300, 0xFF877100, 0xFFF7D000, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFF7D000, 0xFF877100, 0xFF040300, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF201A00, 0xFFD3B100, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFF5CE00, 0xFFE4BF00, 0xFFD9B600, 0xFFD0AE00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD0AE00, 0xFFD9B600, 0xFFE4BF00, 0xFFF5CE00, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFD3B100, 0xFF201A00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF2C2500, 0xFFE7C200, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFF3CC00, 0xFFD8B500, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD8B500, 0xFFF3CC00, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFE7C200, 0xFF2C2500, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF201A00, 0xFFE7C200, 0xFFFFD700, 0xFFFFD700, 0xFFFDD500, 0xFFE0BC00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD4B100, 0xFFE8C200, 0xFFEAC500, 0xFFECC500, 0xFFE2BD00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE0BC00, 0xFFFDD500, 0xFFFFD700, 0xFFFFD700, 0xFFE7C200, 0xFF241E00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF040300, 0xFFD3B100, 0xFFFFD700, 0xFFFFD700, 0xFFFBD400, 0xFFD8B400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD2AF00, 0xFFEAC500, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFE9C400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD8B400, 0xFFFBD400, 0xFFFFD700, 0xFFFFD700, 0xFFD3B100, 0xFF080600, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF877100, 0xFFFFD700, 0xFFFFD700, 0xFFFDD500, 0xFFD8B400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCFAD00, 0xFFE8C200, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFE9C400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD8B400, 0xFFFDD500, 0xFFFFD700, 0xFFFFD700, 0xFF8B7500, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF241E00, 0xFFF7D000, 0xFFFFD700, 0xFFFFD700, 0xFFE0BC00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE8C300, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFE9C400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE0BC00, 0xFFFFD700, 0xFFFFD700, 0xFFFBD300, 0xFF241E00, 0xFF000000, 0xFF000000, 0xFF9B8200, 0xFFFFD700, 0xFFFFD700, 0xFFF3CC00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFF8D000, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFE9C400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFF3CC00, 0xFFFFD700, 0xFFFFD700, 0xFF9F8600, 0xFF000000, 0xFF0C0A00, 0xFFF3CC00, 0xFFFFD700, 0xFFFFD700, 0xFFD8B500, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFEBC500, 0xFFFFD700, 0xFFFFD700, 0xFFF3CB00, 0xFFD4B100, 0xFFEAC400, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFE9C400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD8B500, 0xFFFFD700, 0xFFFFD700, 0xFFF7D000, 0xFF141000, 0xFF5C4D00, 0xFFFFD700, 0xFFFFD700, 0xFFF5CE00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD4B100, 0xFFF7CF00, 0xFFD8B600, 0xFFCCAA00, 0xFFCCAA00, 0xFFEAC400, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFE9C400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFF5CE00, 0xFFFFD700, 0xFFFFD700, 0xFF5C4D00, 0xFF9B8200, 0xFFFFD700, 0xFFFFD700, 0xFFE4BF00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCBAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFEAC400, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFE9C400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE4BF00, 0xFFFFD700, 0xFFFFD700, 0xFF9B8200, 0xFFCBAB00, 0xFFFFD700, 0xFFFFD700, 0xFFD9B600, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCBAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFEAC400, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFE9C400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD9B600, 0xFFFFD700, 0xFFFFD700, 0xFFCBAB00, 0xFFEBC600, 0xFFFFD700, 0xFFFFD700, 0xFFD0AE00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFEAC400, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFE9C400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD0AE00, 0xFFFFD700, 0xFFFFD700, 0xFFEBC600, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCBAA00, 0xFFCBAA00, 0xFFCBAA00, 0xFFCCAA00, 0xFFCBAA00, 0xFFE9C300, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFE9C400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCA900, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE9C300, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFE9C400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFEBC600, 0xFFFFD700, 0xFFFFD700, 0xFFD0AE00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE9C300, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFE9C400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD0AD00, 0xFFFFD700, 0xFFFFD700, 0xFFEBC600, 0xFFCFAE00, 0xFFFFD700, 0xFFFFD700, 0xFFD8B400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE8C300, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFE9C400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD8B400, 0xFFFFD700, 0xFFFFD700, 0xFFCFAE00, 0xFF9F8600, 0xFFFFD700, 0xFFFFD700, 0xFFE4BF00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE8C200, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFE9C400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE4BF00, 0xFFFFD700, 0xFFFFD700, 0xFF9F8600, 0xFF5C4D00, 0xFFFFD700, 0xFFFFD700, 0xFFF4CD00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE7C200, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFE9C400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFF4CD00, 0xFFFFD700, 0xFFFFD700, 0xFF5C4D00, 0xFF141000, 0xFFF7D000, 0xFFFFD700, 0xFFFFD700, 0xFFD5B200, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE7C200, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFE9C400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD5B200, 0xFFFFD700, 0xFFFFD700, 0xFFF7D000, 0xFF100D00, 0xFF000000, 0xFF9F8600, 0xFFFFD700, 0xFFFFD700, 0xFFF0CA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE2BD00, 0xFFE2BD00, 0xFFE2BD00, 0xFFE2BD00, 0xFFE2BD00, 0xFFF1CB00, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFF3CC00, 0xFFE2BD00, 0xFFE2BD00, 0xFFE2BD00, 0xFFE2BD00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFF0CA00, 0xFFFFD700, 0xFFFFD700, 0xFF9F8600, 0xFF000000, 0xFF000000, 0xFF282100, 0xFFFBD300, 0xFFFFD700, 0xFFFFD700, 0xFFDDB900, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFF4CD00, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFDDB900, 0xFFFFD700, 0xFFFFD700, 0xFFFBD300, 0xFF302800, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF8B7500, 0xFFFFD700, 0xFFFFD700, 0xFFFCD400, 0xFFD5B200, 0xFFCCAA00, 0xFFCCAA00, 0xFFF4CD00, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFCCAA00, 0xFFCCAA00, 0xFFD5B200, 0xFFFCD400, 0xFFFFD700, 0xFFFFD700, 0xFF937B00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF0C0A00, 0xFFD7B500, 0xFFFFD700, 0xFFFFD700, 0xFFFAD200, 0xFFD5B200, 0xFFCCAA00, 0xFFF4CD00, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFCCAA00, 0xFFD5B200, 0xFFFAD200, 0xFFFFD700, 0xFFFFD700, 0xFFD7B500, 0xFF0C0A00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF282100, 0xFFEFC900, 0xFFFFD700, 0xFFFFD700, 0xFFFCD400, 0xFFDDB900, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFDDB900, 0xFFFCD400, 0xFFFFD700, 0xFFFFD700, 0xFFEFC900, 0xFF282100, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF3C3200, 0xFFEFC900, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFF0CA00, 0xFFD5B200, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD5B200, 0xFFF0CA00, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFEFC900, 0xFF3C3200, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF282100, 0xFFD7B500, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFF4CD00, 0xFFE4BF00, 0xFFD8B400, 0xFFD0AD00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD0AD00, 0xFFD8B400, 0xFFE4BF00, 0xFFF4CD00, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFD7B500, 0xFF282100, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF0C0A00, 0xFF937B00, 0xFFFBD300, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFBD300, 0xFF937B00, 0xFF0C0A00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF302800, 0xFF9F8600, 0xFFF7D000, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFF7D000, 0xFF9F8600, 0xFF302800, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF100D00, 0xFF5C4D00, 0xFF9F8600, 0xFFCFAE00, 0xFFEBC600, 0xFFFFD700, 0xFFFFD700, 0xFFEBC600, 0xFFCFAE00, 0xFF9F8600, 0xFF5C4D00, 0xFF141000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, };
UG_COLOR coinBackSide[] = {0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF0C0A00, 0xFF5C4D00, 0xFF9B8200, 0xFFCBAB00, 0xFFEBC600, 0xFFFFD700, 0xFFFFD700, 0xFFEBC600, 0xFFCBAB00, 0xFF9B8200, 0xFF5C4D00, 0xFF0C0A00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF241E00, 0xFF9B8200, 0xFFF3CC00, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFF3CC00, 0xFF9B8200, 0xFF241E00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF040300, 0xFF877100, 0xFFF7D000, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFF7D000, 0xFF877100, 0xFF040300, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF201A00, 0xFFD3B100, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFF5CE00, 0xFFE4BF00, 0xFFD9B600, 0xFFD0AE00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD0AE00, 0xFFD9B600, 0xFFE4BF00, 0xFFF5CE00, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFD3B100, 0xFF201A00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF2C2500, 0xFFE7C200, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFF3CC00, 0xFFD8B500, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD8B500, 0xFFF3CC00, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFE7C200, 0xFF2C2500, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF201A00, 0xFFE7C200, 0xFFFFD700, 0xFFFFD700, 0xFFFDD500, 0xFFE0BC00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE0BC00, 0xFFFDD500, 0xFFFFD700, 0xFFFFD700, 0xFFE7C200, 0xFF241E00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF040300, 0xFFD3B100, 0xFFFFD700, 0xFFFFD700, 0xFFFBD400, 0xFFD8B400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD8B400, 0xFFFBD400, 0xFFFFD700, 0xFFFFD700, 0xFFD3B100, 0xFF080600, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF877100, 0xFFFFD700, 0xFFFFD700, 0xFFFDD500, 0xFFD8B400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCEAC00, 0xFFEAC500, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE6C100, 0xFFEAC500, 0xFFCCAA00, 0xFFD8B400, 0xFFFDD500, 0xFFFFD700, 0xFFFFD700, 0xFF8B7500, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF241E00, 0xFFF7D000, 0xFFFFD700, 0xFFFFD700, 0xFFE0BC00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCEAC00, 0xFFF3CC00, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFEBC500, 0xFFCCAA00, 0xFFE0BC00, 0xFFFFD700, 0xFFFFD700, 0xFFFBD300, 0xFF241E00, 0xFF000000, 0xFF000000, 0xFF9B8200, 0xFFFFD700, 0xFFFFD700, 0xFFF3CC00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCEAC00, 0xFFF3CC00, 0xFFFFD700, 0xFFFBD300, 0xFFE8C200, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE6C100, 0xFFF9D100, 0xFFFFD700, 0xFFFFD700, 0xFFE8C200, 0xFFCCAA00, 0xFFCCAA00, 0xFFF3CC00, 0xFFFFD700, 0xFFFFD700, 0xFF9F8600, 0xFF000000, 0xFF0C0A00, 0xFFF3CC00, 0xFFFFD700, 0xFFFFD700, 0xFFD8B500, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCEAC00, 0xFFF3CC00, 0xFFFFD700, 0xFFF7CF00, 0xFFD0AE00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCEAC00, 0xFFF3CC00, 0xFFFFD700, 0xFFFBD300, 0xFFFFD700, 0xFFE5C000, 0xFFCCAA00, 0xFFCCAA00, 0xFFD8B500, 0xFFFFD700, 0xFFFFD700, 0xFFF7D000, 0xFF141000, 0xFF5C4D00, 0xFFFFD700, 0xFFFFD700, 0xFFF5CE00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCEAC00, 0xFFF3CC00, 0xFFFFD700, 0xFFF7CF00, 0xFFD0AE00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCEAC00, 0xFFF3CC00, 0xFFFFD700, 0xFFF7CF00, 0xFFE8C200, 0xFFFFD700, 0xFFE5C000, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFF5CE00, 0xFFFFD700, 0xFFFFD700, 0xFF5C4D00, 0xFF9B8200, 0xFFFFD700, 0xFFFFD700, 0xFFE4BF00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCEAC00, 0xFFF9D100, 0xFFFFD700, 0xFFFBD300, 0xFFE8C200, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE6C100, 0xFFF9D100, 0xFFFFD700, 0xFFF7CF00, 0xFFD0AE00, 0xFFE5C000, 0xFFFFD700, 0xFFE5C000, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE4BF00, 0xFFFFD700, 0xFFFFD700, 0xFF9B8200, 0xFFCBAB00, 0xFFFFD700, 0xFFFFD700, 0xFFD9B600, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFEAC500, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFBD300, 0xFFD0AE00, 0xFFCCAA00, 0xFFE5C000, 0xFFFFD700, 0xFFE5C000, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD9B600, 0xFFFFD700, 0xFFFFD700, 0xFFCBAB00, 0xFFEBC600, 0xFFFFD700, 0xFFFFD700, 0xFFD0AE00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE5C000, 0xFFFFD700, 0xFFF3CC00, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFF2CB00, 0xFFFFD700, 0xFFE8C200, 0xFFCCAA00, 0xFFCCAA00, 0xFFE5C000, 0xFFFFD700, 0xFFE5C000, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD0AE00, 0xFFFFD700, 0xFFFFD700, 0xFFEBC600, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE5C000, 0xFFFFD700, 0xFFE5C000, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE5C000, 0xFFFFD700, 0xFFE5C000, 0xFFCCAA00, 0xFFCCAA00, 0xFFE5C000, 0xFFFFD700, 0xFFE5C000, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE5C000, 0xFFFFD700, 0xFFE5C000, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE5C000, 0xFFFFD700, 0xFFE5C000, 0xFFCCAA00, 0xFFCCAA00, 0xFFE5C000, 0xFFFFD700, 0xFFE5C000, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFEBC600, 0xFFFFD700, 0xFFFFD700, 0xFFD0AE00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE5C000, 0xFFFFD700, 0xFFE5C000, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE5C000, 0xFFFFD700, 0xFFE5C000, 0xFFCCAA00, 0xFFCCAA00, 0xFFE6C100, 0xFFFFD700, 0xFFE5C000, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD0AD00, 0xFFFFD700, 0xFFFFD700, 0xFFEBC600, 0xFFCFAE00, 0xFFFFD700, 0xFFFFD700, 0xFFD8B400, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE5C000, 0xFFFFD700, 0xFFE5C000, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE5C000, 0xFFFFD700, 0xFFE5C000, 0xFFCCAA00, 0xFFCEAC00, 0xFFF9D100, 0xFFFFD700, 0xFFEBC500, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD8B400, 0xFFFFD700, 0xFFFFD700, 0xFFCFAE00, 0xFF9F8600, 0xFFFFD700, 0xFFFFD700, 0xFFE4BF00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE5C000, 0xFFFFD700, 0xFFE5C000, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE5C000, 0xFFFFD700, 0xFFE5C000, 0xFFCEAC00, 0xFFF3CC00, 0xFFFFD700, 0xFFF7CF00, 0xFFD0AE00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE4BF00, 0xFFFFD700, 0xFFFFD700, 0xFF9F8600, 0xFF5C4D00, 0xFFFFD700, 0xFFFFD700, 0xFFF4CD00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE5C000, 0xFFFFD700, 0xFFE5C000, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE5C000, 0xFFFFD700, 0xFFE6C100, 0xFFF3CC00, 0xFFFFD700, 0xFFF7CF00, 0xFFD0AE00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFF4CD00, 0xFFFFD700, 0xFFFFD700, 0xFF5C4D00, 0xFF141000, 0xFFF7D000, 0xFFFFD700, 0xFFFFD700, 0xFFD5B200, 0xFFCCAA00, 0xFFCCAA00, 0xFFE5C000, 0xFFFFD700, 0xFFE5C000, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE5C000, 0xFFFFD700, 0xFFF9D100, 0xFFFFD700, 0xFFF7CF00, 0xFFD0AE00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD5B200, 0xFFFFD700, 0xFFFFD700, 0xFFF7D000, 0xFF100D00, 0xFF000000, 0xFF9F8600, 0xFFFFD700, 0xFFFFD700, 0xFFF0CA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFE5C000, 0xFFFFD700, 0xFFF2CB00, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFF3CC00, 0xFFFFD700, 0xFFFFD700, 0xFFF7CF00, 0xFFD0AE00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFF0CA00, 0xFFFFD700, 0xFFFFD700, 0xFF9F8600, 0xFF000000, 0xFF000000, 0xFF282100, 0xFFFBD300, 0xFFFFD700, 0xFFFFD700, 0xFFDDB900, 0xFFCCAA00, 0xFFE5C000, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFBD300, 0xFFD0AE00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFDDB900, 0xFFFFD700, 0xFFFFD700, 0xFFFBD300, 0xFF302800, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF8B7500, 0xFFFFD700, 0xFFFFD700, 0xFFFCD400, 0xFFD5B200, 0xFFCCAA00, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFE5C000, 0xFFEBC500, 0xFFD0AE00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD5B200, 0xFFFCD400, 0xFFFFD700, 0xFFFFD700, 0xFF937B00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF0C0A00, 0xFFD7B500, 0xFFFFD700, 0xFFFFD700, 0xFFFAD200, 0xFFD5B200, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD5B200, 0xFFFAD200, 0xFFFFD700, 0xFFFFD700, 0xFFD7B500, 0xFF0C0A00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF282100, 0xFFEFC900, 0xFFFFD700, 0xFFFFD700, 0xFFFCD400, 0xFFDDB900, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFCEAB00, 0xFFDDB900, 0xFFFCD400, 0xFFFFD700, 0xFFFFD700, 0xFFEFC900, 0xFF282100, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF3C3200, 0xFFEFC900, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFF0CA00, 0xFFD5B200, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD5B200, 0xFFF0CA00, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFEFC900, 0xFF3C3200, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF282100, 0xFFD7B500, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFF4CD00, 0xFFE4BF00, 0xFFD8B400, 0xFFD0AD00, 0xFFCCAA00, 0xFFCCAA00, 0xFFD0AD00, 0xFFD8B400, 0xFFE4BF00, 0xFFF4CD00, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFD7B500, 0xFF282100, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF0C0A00, 0xFF937B00, 0xFFFBD300, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFBD300, 0xFF937B00, 0xFF0C0A00, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF302800, 0xFF9F8600, 0xFFF7D000, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFFFD700, 0xFFF7D000, 0xFF9F8600, 0xFF302800, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF100D00, 0xFF5C4D00, 0xFF9F8600, 0xFFCFAE00, 0xFFEBC600, 0xFFFFD700, 0xFFFFD700, 0xFFEBC600, 0xFFCFAE00, 0xFF9F8600, 0xFF5C4D00, 0xFF141000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, };
UG_COLOR diceImage1[] = {0xFF000000, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF000000, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF000000, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF000000, };
UG_COLOR diceImage2[] = {0xFF000000, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF000000, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF000000, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF000000, };
UG_COLOR diceImage3[] = {0xFF000000, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF000000, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF000000, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF000000, };
UG_COLOR diceImage4[] = {0xFF000000, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF000000, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFF000000, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF000000, };
UG_COLOR diceImage5[] = {0xFF000000, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF000000, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFF000000, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF000000, };
UG_COLOR diceImage6[] = {0xFF000000, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF000000, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF404040, 0xFF404040, 0xFFFF6A00, 0xFF000000, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFFFF6A00, 0xFF000000, };
UG_COLOR *diceImage[] = {diceImage1, diceImage2, diceImage3, diceImage4, diceImage5, diceImage6};

enum AppState {
    MAIN,
    COIN,
    RANDOM_NUMBER,
    DICE,
    LETTERS
};
int optionsCount = LETTERS - COIN + 1;

const char *optionsNames[] = {
    "Coin",
    "Random Number",
    "Dice",
    "Random Letter"
};

long lastFrame = 0;
int selectedOption = 0;
double selectedOptionRect = selectedOption;
long lastRandomizeTime;
AppState state = MAIN;

void setup() {
    pocuter = new Pocuter();
    //pocuter->begin();
    pocuter->begin(PocuterDisplay::BUFFER_MODE_DOUBLE_BUFFER);
    pocuter->Display->continuousScreenUpdate(false);
    
    pocuterSettings.brightness = getSetting("GENERAL", "Brightness", 5);
    pocuter->Display->setBrightness(pocuterSettings.brightness);
    pocuterSettings.systemColor = getSetting("GENERAL", "SystemColor", C_LIME);

    enableDoubleClick (BUTTON_RANDOMIZE);
    disableDoubleClick(BUTTON_UP);
    disableDoubleClick(BUTTON_DOWN);
    
    if (pocuter->Accelerometer->isOnline() == PocuterAccelerometer::ACCERROR_OK) {
        pocuter->Accelerometer->registerEventHandler(accelerometerShakeHandler, NULL);
    }
    
    lastFrame = millis();
}

void loop() {
    dt = (millis() - lastFrame) / 1000.0;
    lastFrame = millis();
    updateInput();

    if (ACTION_BACK_TO_MENU) {
        pocuter->OTA->setNextAppID(1);
        pocuter->OTA->restart();
    }

    switch (state) {
        case MAIN:
            runMain();
            break;
            
        case COIN:
            runCoin();
            break;
            
        case RANDOM_NUMBER:
            runRandomNumber();
            break;
            
        case DICE:
            runDice();
            break;
            
        case LETTERS:
            runLetters();
            break;
    }

    delay(8);
    
    pocuter->Display->updateScreen();
}

void runMain() {
    if (ACTION_UP) {
        if (selectedOption > 0)
            selectedOption -= 1;
    }
    if (ACTION_DOWN) {
        if (selectedOption < optionsCount-1)
            selectedOption += 1;
    }
    if (ACTION_SELECT) {
        srand(millis());
        state = (AppState) (COIN + selectedOption);
    }

    UGUI* gui = pocuter->ugui;
    uint16_t sizeX;
    uint16_t sizeY;
    pocuter->Display->getDisplaySize(sizeX, sizeY);

    int titleHeight = sizeY*1/4;
    int buttonHeight = (sizeY-titleHeight)/optionsCount;
    
    gui->UG_FillFrame(0, 0, sizeX, sizeY, C_BLACK);
    gui->UG_FontSelect(&FONT_POCUTER_5X7);

    gui->UG_SetForecolor(C_GREEN);
    gui->UG_PutString(sizeX/2 - gui->UG_StringWidth("Random Generator")/2, 0, "Random Generator");

    gui->UG_SetForecolor(C_WHITE);
    for (int i = 0; i < optionsCount; i++) {
        int y = titleHeight + i*buttonHeight;
        //UG_COLOR color = i == selectedOption ? pocuterSettings.systemColor : 0x404040;
        //gui->UG_DrawRoundFrame(0, y, sizeX-1, y+buttonHeight-1, 2, color);
        gui->UG_PutString(3, y, optionsNames[i]);
    }

    if (selectedOption < selectedOptionRect) {
        selectedOptionRect -= OPTION_RECTANGLE_SPEED * dt;
        selectedOptionRect = max((double) selectedOption, selectedOptionRect);
    }

    if (selectedOption > selectedOptionRect) {
        selectedOptionRect += OPTION_RECTANGLE_SPEED * dt;
        selectedOptionRect = min((double) selectedOption, selectedOptionRect);
    }
    
    int selectedOptionRectY = titleHeight + selectedOptionRect*buttonHeight;
    gui->UG_DrawRoundFrame(0, selectedOptionRectY, sizeX-1, selectedOptionRectY+buttonHeight-1, 2, pocuterSettings.systemColor);
}

int coinStatusStart = 0, coinStatusEnd = 0;

void runCoin() {
    if (ACTION_BACK) {
        state = MAIN;
        return;
    }
    
    if (ACTION_RANDOMIZE || ACTION_UP || ACTION_DOWN) {
        coinStatusStart = coinStatusEnd;
        coinStatusEnd = coinStatusStart + 2 + ((rand() & 0x30) >> 4);
        lastRandomizeTime = millis();
    }

    float coinStatus = coinStatusEnd;
    if (millis() < lastRandomizeTime + RANDOMIZE_ANIMATION_TIME*1000.0d) {
        long t = millis();
        float s = (t - lastRandomizeTime) / 1000.0f / RANDOMIZE_ANIMATION_TIME;
        coinStatus = coinStatusStart + s * (coinStatusEnd - coinStatusStart);
    }
    
    UGUI* gui = pocuter->ugui;
    uint16_t sizeX;
    uint16_t sizeY;
    pocuter->Display->getDisplaySize(sizeX, sizeY);

    int titleHeight = sizeY*1/4;
    int coinCenterY = sizeY/2;
    
    gui->UG_FillFrame(0, 0, sizeX, sizeY, C_BLACK);
    gui->UG_FontSelect(&FONT_POCUTER_5X7);

    gui->UG_SetForecolor(C_GREEN);
    gui->UG_PutString(sizeX/2 - gui->UG_StringWidth("Coin")/2, 0, "Coin");

    //int coinStatusInt = (int) (coinStatus);
    //float coinStatusFrac = coinStatus - coinStatusInt;
    int s = cos(coinStatus*PI) * 32;
    int h = abs(s);
    drawImage(sizeX/2-16, coinCenterY-(h+1)/2, (s < 0) ? coinFrontSide : coinBackSide, 32, 32, h);
    
    drawButtonText(gui, "Toss", 0, sizeX, sizeY);
    drawButtonText(gui, "Toss", 1, sizeX, sizeY);
    drawButtonText(gui, "Toss | x2 Back", 2, sizeX, sizeY);
}

int randomNumberUpperLimit = 10;
int randomNumber;

void runRandomNumber() {
    if (ACTION_BACK) {
        state = MAIN;
        return;
    }
    
    if (ACTION_RANDOMIZE) {
        lastRandomizeTime = millis();
    }

    if (millis() < lastRandomizeTime + RANDOMIZE_ANIMATION_TIME*1000.0d) {
        randomNumber = rand() % randomNumberUpperLimit + 1;
    } else {
        if (ACTION_UP) {
            if (randomNumberUpperLimit < MAX_RANDOM_NUMBER) {
                randomNumberUpperLimit++;
            }
        }
        if (ACTION_DOWN) {
            if (randomNumberUpperLimit > 1) {
                randomNumberUpperLimit--;
            }
        }
    }
    
    UGUI* gui = pocuter->ugui;
    uint16_t sizeX;
    uint16_t sizeY;
    pocuter->Display->getDisplaySize(sizeX, sizeY);

    int titleHeight = sizeY*1/4;
    int numberCenterY = sizeY/2;
    
    gui->UG_FillFrame(0, 0, sizeX, sizeY, C_BLACK);
    gui->UG_FontSelect(&FONT_POCUTER_5X7);

    char strbuf[64];
    gui->UG_SetForecolor(C_GREEN);
    sprintf(strbuf, "Number");
    gui->UG_PutString(sizeX/2 - gui->UG_StringWidth(strbuf)/2, 0, strbuf);
    sprintf(strbuf, "1-%d", randomNumberUpperLimit);
    gui->UG_PutString(sizeX/2 - gui->UG_StringWidth(strbuf)/2, 8, strbuf);

    gui->UG_FontSelect(&FONT_POCUTER_5X8);
    sprintf(strbuf, "%d", randomNumber);
    gui->UG_SetForecolor(C_ORANGE);
    gui->UG_PutString(sizeX/2 - gui->UG_StringWidth(strbuf)/2, numberCenterY-5, strbuf);

    drawButtonText(gui, "Inc.", 0, sizeX, sizeY);
    drawButtonText(gui, "Dec.", 1, sizeX, sizeY);
    drawButtonText(gui, "Roll | x2 Back", 2, sizeX, sizeY);
}

int diceCount = 1;
int diceNumbers[MAX_DICE];

void runDice() {
    if (ACTION_BACK) {
        state = MAIN;
        return;
    }
    
    if (ACTION_RANDOMIZE) {
        lastRandomizeTime = millis();
    }
    
    if (millis() < lastRandomizeTime + RANDOMIZE_ANIMATION_TIME*1000.0d) {
        for (int i = 0; i < diceCount; i++)
            diceNumbers[i] = rand() % 6;
    } else {
        if (ACTION_UP) {
            if (diceCount < MAX_DICE) {
                diceCount++;
            }
        }
        if (ACTION_DOWN) {
            if (diceCount > 1) {
                diceCount--;
            }
        }
    }
    
    UGUI* gui = pocuter->ugui;
    uint16_t sizeX;
    uint16_t sizeY;
    pocuter->Display->getDisplaySize(sizeX, sizeY);

    int titleHeight = sizeY*1/4;
    int sumHeight = sizeY*1/4;
    
    gui->UG_FillFrame(0, 0, sizeX, sizeY, C_BLACK);
    gui->UG_FontSelect(&FONT_POCUTER_5X7);

    gui->UG_SetForecolor(C_GREEN);
    gui->UG_PutString(sizeX/2 - gui->UG_StringWidth("Dice")/2, 0, "Dice");
    
    gui->UG_SetForecolor(C_ORANGE);
    if (diceCount <= MAX_DICE/4) {
        int diceCenterY = titleHeight + (sizeY-titleHeight-sumHeight)/2;
        drawDiceRow(gui, sizeX, diceCenterY, diceCount, diceNumbers);
    } else {
        int diceCenterUpperY = titleHeight + (sizeY-titleHeight-sumHeight)*1/4;
        int diceCenterLowerY = titleHeight + (sizeY-titleHeight-sumHeight)*3/4;
        int countUpperRow = (diceCount)/2;
        int countLowerRow = diceCount - countUpperRow;
        
        drawDiceRow(gui, sizeX, diceCenterUpperY, countUpperRow, diceNumbers);
        drawDiceRow(gui, sizeX, diceCenterLowerY, countLowerRow, diceNumbers + countUpperRow);
    }
    
    int sum = 0;
    for (int i = 0; i < diceCount; i++)
        sum += diceNumbers[i] + 1;
    char strbuf[64];
    sprintf(strbuf, "Total: %d", sum);
    gui->UG_SetForecolor(C_BLUE);
    gui->UG_PutString(sizeX/2 - gui->UG_StringWidth(strbuf)/2, sizeY-sumHeight, strbuf);

    drawButtonText(gui, "More", 0, sizeX, sizeY);
    drawButtonText(gui, "Less", 1, sizeX, sizeY);
    drawButtonText(gui, "Roll", 2, sizeX, sizeY);
}

void drawDiceRow(UGUI *gui, int sizeX, int diceCenterY, int diceCount, int dice[]) {
    int diceHorArea = sizeX*7/8;
    int diceXOffset = (sizeX - diceHorArea)/2;
    int diceSpaceBetween = diceHorArea/diceCount;

    //char strbuf[16];
    for (int i = 0; i < diceCount; i++) {
        int diceCenterX = diceXOffset + diceSpaceBetween*i + diceSpaceBetween/2;

        //sprintf(strbuf, "%d", dice[i] + 1);
        //gui->UG_PutString(diceCenterX - gui->UG_StringWidth(strbuf)/2, diceCenterY - 5, strbuf);
        drawImage(diceCenterX-5, diceCenterY-5, diceImage[dice[i]], 10, 10, 10);
    }
}

char randomLetter;

void runLetters() {
    if (ACTION_BACK) {
        state = MAIN;
        return;
    }
    
    if (ACTION_RANDOMIZE || ACTION_UP || ACTION_DOWN) {
        lastRandomizeTime = millis();
    }

    if (millis() < lastRandomizeTime + RANDOMIZE_ANIMATION_TIME*1000.0d) {
        randomLetter = rand() % 26;
    }
    
    UGUI* gui = pocuter->ugui;
    uint16_t sizeX;
    uint16_t sizeY;
    pocuter->Display->getDisplaySize(sizeX, sizeY);

    int titleHeight = sizeY*1/4;
    int letterCenterY = sizeY/2;
    
    gui->UG_FillFrame(0, 0, sizeX, sizeY, C_BLACK);
    gui->UG_FontSelect(&FONT_POCUTER_5X7);

    gui->UG_SetForecolor(C_GREEN);
    gui->UG_PutString(sizeX/2 - gui->UG_StringWidth("Letters")/2, 0, "Letters");
    gui->UG_PutString(sizeX/2 - gui->UG_StringWidth("A-Z")/2, 10, "A-Z");

    char strbuf[5];
    sprintf(strbuf, "%c", 'A' + randomLetter);
    gui->UG_SetForecolor(C_ORANGE);
    gui->UG_PutString(sizeX/2 - gui->UG_StringWidth(strbuf)/2, letterCenterY-5, strbuf);
    
    drawButtonText(gui, "Roll", 0, sizeX, sizeY);
    drawButtonText(gui, "Roll", 1, sizeX, sizeY);
    drawButtonText(gui, "Roll | x2 Back", 2, sizeX, sizeY);
}

void drawImage(int x, int y, UG_COLOR *data, int width, int originalHeight, int height) {
    for (int yy = 0; yy < height; yy += 1) {
        int iy = yy * originalHeight / height;
        
        for (int xx = 0; xx < width; xx += 1) {
            pocuter->ugui->UG_DrawPixel(x+xx, y+yy, data[xx + iy*width]);
        }
    }
}

void drawButtonText(UGUI *gui, const char *str, int corner, int sizeX, int sizeY) {
    gui->UG_FontSelect(&FONT_POCUTER_4X6);
    gui->UG_SetForecolor(C_ORANGE);
    if (corner == 0) {
        gui->UG_FillFrame(sizeX - gui->UG_StringWidth(str)-3, 0, sizeX, 10, C_BLACK);
        gui->UG_DrawFrame(sizeX - gui->UG_StringWidth(str)-3, 0, sizeX, 10, C_GREEN);
        gui->UG_PutString(sizeX - gui->UG_StringWidth(str)-1, -1, str);
    } else if (corner == 1) {
        gui->UG_FillFrame(sizeX - gui->UG_StringWidth(str)-3, sizeY-11, sizeX, sizeY-1, C_BLACK);
        gui->UG_DrawFrame(sizeX - gui->UG_StringWidth(str)-3, sizeY-11, sizeX, sizeY-1, C_GREEN);
        gui->UG_PutString(sizeX - gui->UG_StringWidth(str)-1, sizeY-12, str);
    } else if (corner == 2) {
        gui->UG_FillFrame(-1, sizeY-11, gui->UG_StringWidth(str)+2, sizeY-1, C_BLACK);
        gui->UG_DrawFrame(-1, sizeY-11, gui->UG_StringWidth(str)+2, sizeY-1, C_GREEN);
        gui->UG_PutString(1, sizeY-12, str);
    }
}

void accelerometerShakeHandler(PocuterAccelerometer::ACCEVENT event, void* userData) {
    if (event == PocuterAccelerometer::ACC_SHAKE) {
        lastRandomizeTime = millis();
    }
}
